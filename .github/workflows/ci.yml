name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort flake8 mypy

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check app tests

    - name: Import sort check with isort
      run: |
        isort --check-only app tests

    - name: Type check with mypy
      run: |
        mypy app --ignore-missing-imports
      continue-on-error: true  # 型チェックはエラーがあっても継続

    - name: Run tests with pytest
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Security scan with safety
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Security scan with bandit
      run: |
        bandit -r app -f json -o bandit-report.json
      continue-on-error: true

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t streamlit-ad-app:test .

    - name: Test Docker container startup
      run: |
        docker run -d --name test-container -p 8501:8501 streamlit-ad-app:test
        sleep 30  # アプリの起動を待つ
        curl -f http://localhost:8501 || exit 1
        docker stop test-container

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Run basic performance test
      run: |
        # 基本的なパフォーマンステスト（モックAPIを使用）
        echo "Performance testing placeholder - implement as needed"

  auto-format:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.head_ref }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort

    - name: Auto-format code
      run: |
        black app tests
        isort app tests

    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git diff --quiet || (git add . && git commit -m "Auto-format code with black and isort")
        git push
      continue-on-error: true