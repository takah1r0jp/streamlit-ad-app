name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-northeast1
  REPOSITORY: streamlit-ad-app
  SERVICE: streamlit-ad-app
  REGION: asia-northeast1

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov ruff mypy

    - name: Lint and format check with ruff
      run: |
        # Check formatting and linting (combines black, isort, flake8)
        ruff check app tests
        ruff format --check app tests

    - name: Type check with mypy
      run: |
        mypy app --ignore-missing-imports
      continue-on-error: true  # 型チェックはエラーがあっても継続

    - name: Run tests with pytest
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Security scan with safety
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Security scan with bandit
      run: |
        bandit -r app -f json -o bandit-report.json
      continue-on-error: true

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t streamlit-ad-app:test .

    - name: Test Docker container startup
      run: |
        docker run -d --name test-container -p 8501:8501 streamlit-ad-app:test
        sleep 30  # アプリの起動を待つ
        curl -f http://localhost:8501 || exit 1
        docker stop test-container

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Run basic performance test
      run: |
        # 基本的なパフォーマンステスト（モックAPIを使用）
        echo "Performance testing placeholder - implement as needed"

  deploy:
    needs: test
    # EMERGENCY: Auto-deployment disabled due to API key security incident
    if: false  # github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Configure Docker to use gcloud
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: Create Artifact Registry repository (if not exists)
      run: |
        gcloud artifacts repositories create ${{ env.REPOSITORY }} \
          --repository-format=docker \
          --location=${{ env.GAR_LOCATION }} \
          --description="Docker repository for Streamlit AD App" || true

    - name: Build and Push Container
      run: |-
        docker build -f Dockerfile.cloudrun -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/app:${{ github.sha }}" ./
        docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/app:${{ github.sha }}"

    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE }}
        region: ${{ env.REGION }}
        image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/app:${{ github.sha }}
        flags: |
          --allow-unauthenticated
          --service-account=cloud-run-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com
          --memory=2Gi
          --cpu=1
          --min-instances=0
          --max-instances=3
          --concurrency=5
          --timeout=600

    - name: Show Output
      run: echo ${{ steps.deploy.outputs.url }}

  auto-format:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.head_ref }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff

    - name: Auto-format code
      run: |
        ruff check --fix app tests
        ruff format app tests

    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git diff --quiet || (git add . && git commit -m "Auto-format code with ruff")
        git push
      continue-on-error: true