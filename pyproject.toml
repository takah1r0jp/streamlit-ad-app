[project]
name = "streamlit-ad-app"
version = "0.1.0"
description = "AI anomaly detection program generator using Streamlit"
requires-python = ">=3.11"
dependencies = [
    "streamlit>=1.45.0,<2.0.0",
    "anthropic>=0.40.0",
    "torch>=2.5.0,<3.0.0",
    "torchvision>=0.20.0,<1.0.0",
    "transformers>=4.46.0,<5.0.0",
    "pillow>=10.2.0",
    "numpy>=1.26.0",
    "psutil>=5.9.0",
    "fastapi>=0.115.0,<1.0.0",
    "uvicorn>=0.34.0,<1.0.0",
    "pandas>=2.2.0,<3.0.0",
    "matplotlib>=3.10.0,<4.0.0",
    "ruff>=0.13.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]

[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "ruff>=0.8.0",
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
]

[tool.ruff]
target-version = "py311"
line-length = 88
fix = true

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Also enable isort (`I`), pyupgrade (`UP`), and other useful rules
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # Pyflakes
    "I",     # isort
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "PIE",   # flake8-pie
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
]

ignore = [
    "E501",  # line too long (handled by formatter)
    "W291",  # trailing whitespace (handled by formatter)
    "W293",  # blank line contains whitespace (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from None
    "SIM116", # use dict instead of consecutive if statements (optional)
    "SIM117", # use single with statement (optional)
    "SIM103", # return negated condition directly (optional)
    "B018",  # useless expression (may be intentional in some cases)
    "B007",  # unused loop variable (common in data processing)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py files
"tests/**/*" = ["S101"]   # Allow assert statements in tests

[tool.ruff.lint.isort]
known-first-party = ["app"]
known-third-party = ["streamlit", "anthropic", "torch", "transformers", "PIL", "numpy", "psutil"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
